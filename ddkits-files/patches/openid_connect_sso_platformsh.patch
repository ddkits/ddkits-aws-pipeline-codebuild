diff --git a/sso/sso.php b/sso/sso.php
index 0d511e7..75669e1 100644
--- a/sso/sso.php
+++ b/sso/sso.php
@@ -1,4 +1,16 @@
 <?php
+// Save destination because external destinations are removed by Drupal bootstrap.
+$destination = isset($_GET['destination']) ? $_GET['destination'] : '';
+
+/**
+ * Root directory of Drupal installation.
+ */
+define('DRUPAL_ROOT', getcwd());
+include_once DRUPAL_ROOT . '/includes/bootstrap.inc';
+drupal_bootstrap(DRUPAL_BOOTSTRAP_SESSION);
+
+// Readd destination
+$_GET['destination'] = $destination;
 
 /**
  * @file
@@ -15,21 +27,15 @@ if (empty($_SERVER['HTTP_HOST'])) {
 // Don't include the protocol (http://, https://).
 // Example url (SSO script on subdomain): "a.firstsite.com"
 // Example url (SSO script in the Drupal directory): "firstsite.com/sso.php"
-$network = array(
-  'a.firstsite.com',
-  'a.shop.secondsite.com',
-);
+$network = variable_get('sso_network', array());
 
 // An array of network domain names. The keys are potential origin host names
 // which do not appear in the list above, and each value is the cookie domain
 // name for that host.
 // $domains = array();
 
-// Enable HTTPS for all redirect URLs.
-// $https = true;
-
 // Enable adding the domain name to the cookie name.
-// $cookie_name_strict = true;
+$cookie_name_strict = FALSE;
 
 // Validate the query parameters and network size.
 if (!sso_validate_query_params() || count($network) < 2) {
@@ -52,10 +58,13 @@ foreach ($network as $delta => $site) {
 $network = array_values($network);
 
 if (ltrim($host, 'a.') == $origin_domain) {
+  // Delete all cookies currently set on this for SSOLogin.
+  sso_delete_cookies();
+
   // We are on the site which has started the process.
   // No need to create the cookie, the site already handled its login / logout.
   // Start from the beginning of the redirect list.
-  $redirect_destination = sso_redirect_url($network[0], !empty($https));
+  $redirect_destination = sso_redirect_url($network[0], $is_https);
 }
 else {
   sso_create_cookie($_GET['op']);
@@ -75,7 +84,7 @@ else {
   $next_site_delta = $current_site_delta + 1;
   if (isset($network[$next_site_delta])) {
     // Redirect to the next network site.
-    $redirect_destination = sso_redirect_url($network[$next_site_delta], !empty($https));
+    $redirect_destination = sso_redirect_url($network[$next_site_delta], $is_https);
   }
   else {
     // We are at the last network site. In these scenarios, we need to
@@ -84,7 +93,7 @@ else {
       $redirect_destination = $_GET['destination'];
     }
     else {
-      $redirect_destination = ($https ? 'https://' : 'http://') . $_GET['origin_host'];
+      $redirect_destination = ($is_https ? 'https://' : 'http://') . $_GET['origin_host'];
     }
   }
 }
@@ -133,24 +142,39 @@ function sso_create_cookie($operation) {
     $create = 'Drupal.visitor.SSOLogin';
   }
   else {
+    global $user;
+    watchdog('user', 'SSO Session closed for %name.', array('%name' => $user->name));
+    module_invoke_all('user_logout', $user);
+    session_destroy();
+
     $remove = 'Drupal.visitor.SSOLogin';
     $create = 'Drupal.visitor.SSOLogout';
   }
 
-  $secure = !empty($GLOBALS['https']);
-
-  $domain = ltrim(strtolower($_SERVER['HTTP_HOST']), 'a.');
-
+  $domain = $GLOBALS['cookie_domain'];
   if (!empty($GLOBALS['cookie_name_strict'])) {
     $remove .= '_' . $domain;
     $create .= '_' . $domain;
   }
 
-  setcookie($remove, '', time() - 3600, '/', $domain, $secure);
+  setcookie($remove, '', time() - 3600, '/', $GLOBALS['cookie_domain'], $GLOBALS['is_https']);
   // The expiration should be less than the Drupal session duration.
   // The most common Drupal `session.gc_maxlifetime` value is 200000 seconds,
   // so we define the expiration to half a minute before that, accordingly.
-  setcookie($create, 1, time() + 200000 - 30, '/', $domain, $secure);
+  setcookie($create, 1, time() + ini_get('session.cookie_lifetime') - 30, '/', $GLOBALS['cookie_domain'], $GLOBALS['is_https']);
+}
+
+/**
+ * Helper function for removing all SSO cookies.
+ */
+function sso_delete_cookies() {
+  $removes = array('Drupal.visitor.SSOLogout', 'Drupal.visitor.SSOLogin');
+  foreach ($removes as $remove) {
+    if (!empty($GLOBALS['cookie_name_strict'])) {
+      $remove .= '_' . $GLOBALS['cookie_domain'];
+    }
+    setcookie($remove, '', time() - 3600, '/', $GLOBALS['cookie_domain'], $GLOBALS['is_https']);
+  }
 }
 
 /**
@@ -160,9 +184,9 @@ function sso_create_cookie($operation) {
  * @param bool $https
  * @return string
  */
-function sso_redirect_url($host, $https) {
+function sso_redirect_url($host, $is_https) {
   if (!strpos($host, '//')) {
-    $host = ($https ? 'https://' : 'http://') . $host;
+    $host = ($is_https ? 'https://' : 'http://') . $host;
   }
   $args = array(
     'op' => $_GET['op'],
@@ -171,5 +195,5 @@ function sso_redirect_url($host, $https) {
   if ($_GET['op'] == 'login') {
     $args['destination'] = $_GET['destination'];
   }
-  return $host . '/?' . http_build_query($args);
+  return $host . '?' . http_build_query($args);
 }
